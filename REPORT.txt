My program:
I chose to create an implementation of the UNIX tree command using C for the final project. The program is a command-line tool in UNIX C that is an enhanced version of the tree command. Not only does the program provide a visually appealing tree-like structure of large directories, but I also provided features that the normal tree command already has, such as :showing hidden files, writing to another file, and using a substring to look for specific files. Furthermore, I included more features that enhance the tree command, such as: showing the permissions of files in octal mode, showing only certain file types, showing the full path of each file, showing the sizes of files in kilobytes, specifying the depth of subdirectories to look through the tree, and comparing two different directories. Along with additional command line arguments, the program also color codes specific files and directories using ANSI escape codes. After searching some of the ANSI escape codes, I made blue words represent directories, green words represent executable files, red words represent read only files, cyan words represent symbolic links along with an arrow that points to the file that it links to. The last aspect of my program is comparing files and directories side by side. As of right now, this feature compares the file names between two directories, highlighting any file names that do not match in blue. This feature was definitely the most difficult to implement because I could not use recursion to produce the nicely formatted output, so I modified my methods to store the file names into a 2-D array for each directory. I hope to continue building this method to format the side by side in a similar way to how the normal tree looks. Furthermore, I would like to continue working on how the output for -n <substring> and -t <filetype> looks because as of right now, the file tree shows directories even if they do not include the specified parameters.

	My effort:
	I definitely have put more than 1.5x effort of a homework project on this project because of the time and dedication I put into this project. Even though I definitely enjoyed working on the file tree implementation and hope to continue working on it, I still think that I put a lot of effort in. As proof, I wrote about nine hundred lines of code, which is much more than any of the other projects or labs that we have had in this class. Even with all of those lines of code, I believe it still is an underrepresentation of the effort I put in because I had to go through trials and errors to find methods that would correctly produce the output that I wanted. Whenever something did not work correctly, I would take my computer to a study room to figure out what the issue was for however long it would take, which sometimes wound up to be hours. Furthermore, I also spent hours trying to implement different functionalities, which are still partly functioning, because, to be honest, I became fascinated with this project and the output I was getting. I have spent time trying to modularize my code, make it more efficient, and tried using recursion in different ways to produce my desired output, showing that I have put plenty of effort into this project.
